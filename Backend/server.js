const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const bcrypt = require('bcrypt');
const path = require('path');
const multer = require('multer');
const fs = require('fs');

const app = express();
app.use(cors());
app.use(express.json());

// ... other middleware ...

const imagesDir = path.join(__dirname, 'public', 'images', 'user');
if (!fs.existsSync(imagesDir)) {
    fs.mkdirSync(imagesDir, { recursive: true });
}

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, imagesDir);
    },
    filename: (req, file, cb) => {
        const ext = '.png'; // Ch·ªâ l∆∞u d∆∞·ªõi d·∫°ng PNG
        const filename = `${Date.now()}-${Math.random().toString(36).substring(7)}${ext}`;
        cb(null, filename);
    }
});

const upload = multer({
    storage,
    fileFilter: (req, file, cb) => {
        const filetypes = /png/;
        const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
        const mimetype = filetypes.test(file.mimetype);
        if (mimetype && extname) {
            return cb(null, true);
        }
        cb(new Error('Ch·ªâ h·ªó tr·ª£ file PNG.'));
    },
    limits: { fileSize: 5 * 1024 * 1024 } // Gi·ªõi h·∫°n 5MB
});

app.use('/avatars', express.static('public/avatars')); // Th∆∞ m·ª•c ch·ª©a ·∫£nh ƒë·∫°i di·ªán ng∆∞·ªùi d√πng

// ... your routes ...

// PostgreSQL connection
const pool = new Pool({
  user: 'postgres',
  host: '192.168.1.8', // ƒê·∫£m b·∫£o IP n√†y ƒë√∫ng v√† c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c t·ª´ thi·∫øt b·ªã/gi·∫£ l·∫≠p c·ªßa b·∫°n
  database: 'app_english',
  password: '123',
  port: 5432,
});

// Test route
app.get('/', (req, res) => {
  res.send('üöÄ Server is running!');
});

// Register route
// Register endpoint
app.post('/register', async (req, res) => {
    const { username, email, password } = req.body;

    if (!username || !email || !password) {
        return res.status(400).json({ error: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.' });
    }

    try {
        const emailCheck = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
        if (emailCheck.rows.length > 0) {
            return res.status(400).json({ error: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.' });
        }

        const usernameCheck = await pool.query('SELECT * FROM users WHERE username = $1', [username]);
        if (usernameCheck.rows.length > 0) {
            return res.status(400).json({ error: 'T√™n ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const result = await pool.query(
            'INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING id, username, email, role',
            [username, email, hashedPassword]
        );

        const user = result.rows[0];
        res.status(201).json({
            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
            userId: user.id,
            username: user.username,
            email: user.email,
            role: user.role
        });
    } catch (error) {
        console.error('Error during registration:', error);
        res.status(500).json({ error: 'L·ªói server.' });
    }
});

// Login endpoint
app.post('/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ error: 'Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u.' });
    }

    try {
        const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
        if (result.rows.length === 0) {
            return res.status(400).json({ error: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });
        }

        const user = result.rows[0];
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(400).json({ error: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });
        }

        res.status(200).json({
            message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
            userId: user.id,
            username: user.username,
            email: user.email,
            role: user.role
        });
    } catch (error) {
        console.error('Error during login:', error);
        res.status(500).json({ error: 'L·ªói server.' });
    }
});

// Get user info endpoint
app.get('/api/user/:userId', async (req, res) => {
    const { userId } = req.params;

    try {
        const result = await pool.query(
            'SELECT id, username, email, role, date_of_birth, phone_number, address, profile_image_url FROM users WHERE id = $1',
            [userId]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.' });
        }

        const user = result.rows[0];
        res.status(200).json(user);
    } catch (error) {
        console.error('Error fetching user:', error);
        res.status(500).json({ error: 'L·ªói server.' });
    }
});

// Update user info endpoint
app.put('/api/user/:userId', async (req, res) => {
    const { userId } = req.params;
    const { username, email, dateOfBirth, phoneNumber, address, profileImageUrl } = req.body;

    if (!username || !email || !dateOfBirth || !phoneNumber || !address) {
        return res.status(400).json({ error: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc.' });
    }

    try {
        const usernameCheck = await pool.query(
            'SELECT id FROM users WHERE username = $1 AND id != $2',
            [username, userId]
        );
        if (usernameCheck.rows.length > 0) {
            return res.status(400).json({ error: 'T√™n ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.' });
        }

        const emailCheck = await pool.query(
            'SELECT id FROM users WHERE email = $1 AND id != $2',
            [email, userId]
        );
        if (emailCheck.rows.length > 0) {
            return res.status(400).json({ error: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.' });
        }

        const result = await pool.query(
            'UPDATE users SET username = $1, email = $2, date_of_birth = $3, phone_number = $4, address = $5, profile_image_url = $6 WHERE id = $7 RETURNING *',
            [username, email, dateOfBirth, phoneNumber, address, profileImageUrl || null, userId]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.' });
        }

        res.status(200).json({
            message: 'Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
            user: result.rows[0]
        });
    } catch (error) {
        console.error('Error updating user:', error);
        res.status(500).json({ error: 'L·ªói server.' });
    }
});

// Upload image endpoint
app.post('/api/upload-image', upload.single('image'), async (req, res) => {
    const { userId } = req.body;

    if (!userId || !req.file) {
        return res.status(400).json({ error: 'Thi·∫øu userId ho·∫∑c file ·∫£nh.' });
    }

    try {
        const imagePath = `/images/user/${req.file.filename}`;
        const result = await pool.query(
            'UPDATE users SET profile_image_url = $1 WHERE id = $2 RETURNING *',
            [imagePath, userId]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.' });
        }

        res.status(200).json({
            message: '·∫¢nh h·ªì s∆° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.',
            profileImageUrl: imagePath
        });
    } catch (error) {
        console.error('Error uploading image:', error);
        res.status(500).json({ error: 'L·ªói t·∫£i ·∫£nh l√™n.' });
    }
});

// C√°c endpoint kh√°c gi·ªØ nguy√™n
app.get('/levels', async (req, res) => {
    try {
        const result = await pool.query('SELECT level_id, name, image_url FROM levels ORDER BY level_id ASC');
        res.status(200).json(result.rows);
    } catch (err) {
        console.error('L·ªói khi l·∫•y danh s√°ch levels:', err);
        res.status(500).json({ error: 'L·ªói server, kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu levels.' });
    }
});

// Route l·∫•y danh s√°ch levels
app.get('/levels', async (req, res) => {
    try {
        const result = await pool.query('SELECT level_id, name, image_url FROM levels ORDER BY level_id ASC');
        res.status(200).json(result.rows);
    } catch (err) {
        console.error('L·ªói khi l·∫•y danh s√°ch levels:', err);
        res.status(500).json({ error: 'L·ªói server, kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu levels.' });
    }
});

// Route l·∫•y danh s√°ch units theo level_id
// ƒê√É S·ª¨A: X√ìA ƒê·ªäNH NGHƒ®A TR√ôNG L·∫∂P ·ªû CU·ªêI FILE
app.get('/levels/:level_id/units', async (req, res) => {
    const levelId = parseInt(req.params.level_id); // ƒê·∫£m b·∫£o chuy·ªÉn ƒë·ªïi sang s·ªë nguy√™n

    if (isNaN(levelId)) {
        return res.status(400).json({ error: 'ID c·∫•p ƒë·ªô kh√¥ng h·ª£p l·ªá.' });
    }

    try {
        const result = await pool.query(
            'SELECT unit_id, title, image_url FROM units WHERE level_id = $1 ORDER BY unit_id ASC', // ƒê·ªïi title th√†nh name cho kh·ªõp frontend
            [levelId]
        );
        res.status(200).json(result.rows);
    } catch (err) {
        console.error(`L·ªói khi l·∫•y units cho level_id ${levelId}:`, err);
        res.status(500).json({ error: 'L·ªói server n·ªôi b·ªô khi l·∫•y units' });
    }
});

// Th√™m Route l·∫•y danh s√°ch tests theo unit_id
app.get('/tests/:unit_id', async (req, res) => {
    const unitId = parseInt(req.params.unit_id);

    if (isNaN(unitId)) {
        return res.status(400).json({ error: 'ID unit kh√¥ng h·ª£p l·ªá.' });
    }

    try {
        const result = await pool.query(
            `SELECT tests.*, 
             (SELECT COUNT(*) FROM questions WHERE questions.test_id = tests.test_id) AS question_count
             FROM tests 
             WHERE unit_id = $1 
             ORDER BY test_id ASC`,
            [unitId]
        );
        res.status(200).json(result.rows);
    } catch (err) {
        console.error(`L·ªói khi l·∫•y tests cho unit_id ${unitId}:`, err);
        res.status(500).json({ error: 'L·ªói server n·ªôi b·ªô khi l·∫•y tests' });
    }
});
app.post('/tests/:test_id/start', async (req, res) => {
    const testId = parseInt(req.params.test_id);

    if (isNaN(testId)) {
        return res.status(400).json({ error: 'ID b√†i ki·ªÉm tra kh√¥ng h·ª£p l·ªá.' });
    }

    try {
        await pool.query(
            'UPDATE tests SET play_count = play_count + 1 WHERE test_id = $1',
            [testId]
        );
        res.status(200).json({ message: 'Play count updated successfully.' });
    } catch (err) {
        console.error(`L·ªói khi c·∫≠p nh·∫≠t play_count cho test_id ${testId}:`, err);
        res.status(500).json({ error: 'L·ªói server n·ªôi b·ªô khi c·∫≠p nh·∫≠t play_count' });
    }
});



// Get user info route (d√†nh cho HomeScreen)
app.get('/api/user', async (req, res) => {
  const userId = req.query.userId; 

  if (!userId) {
    return res.status(400).json({ error: 'Vui l√≤ng cung c·∫•p userId' });
  }

  try {
    const result = await pool.query('SELECT username FROM users WHERE id = $1', [userId]);
    const user = result.rows[0];

    if (!user) {
      return res.status(404).json({ error: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }

    res.status(200).json({ username: user.username });
  } catch (err) {
    console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', err);
    res.status(500).json({ error: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau' });
  }
});
// Route ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√¢u h·ªèi v√† c√°c ƒë√°p √°n li√™n quan cho m·ªôt b√†i test
app.get('/tests/:test_id/questions', async (req, res) => {
  const testId = parseInt(req.params.test_id);

  if (isNaN(testId)) {
    return res.status(400).json({ error: 'ID b√†i ki·ªÉm tra kh√¥ng h·ª£p l·ªá.' });
  }

  try {
    // L·∫•y t·∫•t c·∫£ c√¢u h·ªèi cho test_id n√†y
    const questionsResult = await pool.query(
      'SELECT question_id, test_id, type_id, content, image_path, correct_answer, audio_path FROM questions WHERE test_id = $1 ORDER BY question_id ASC',
      [testId]
    );

    if (questionsResult.rows.length === 0) {
      return res.status(200).json([]); // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ c√¢u h·ªèi
    }

    const questionsWithAnswers = [];
    for (const question of questionsResult.rows) {
      // V·ªõi m·ªói c√¢u h·ªèi, l·∫•y t·∫•t c·∫£ ƒë√°p √°n li√™n quan
      const answersResult = await pool.query(
        'SELECT answer_id, question_id, answer_text, is_correct FROM answers WHERE question_id = $1 ORDER BY answer_id ASC',
        [question.question_id]
      );
      
      // G√°n m·∫£ng ƒë√°p √°n v√†o ƒë·ªëi t∆∞·ª£ng c√¢u h·ªèi
      questionsWithAnswers.push({
        ...question,
        answers: answersResult.rows,
      });
    }

    res.status(200).json(questionsWithAnswers);
  } catch (err) {
    console.error(`L·ªói khi l·∫•y c√¢u h·ªèi cho test_id ${testId}:`, err);
    res.status(500).json({ error: 'L·ªói server n·ªôi b·ªô khi l·∫•y c√¢u h·ªèi.' });
  }
});


app.post('/history', async (req, res) => {
    const { userId, testId, score, totalQuestions, correctAnswers, userAnswers } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (userId === undefined || testId === undefined || score === undefined || totalQuestions === undefined || correctAnswers === undefined || userAnswers === undefined) {
        return res.status(400).json({ error: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin k·∫øt qu·∫£ b√†i l√†m.' });
    }

    try {
        const result = await pool.query(
            `INSERT INTO public.history (user_id, test_id, score, total_questions, correct_answers, user_answers)
             VALUES ($1, $2, $3, $4, $5, $6) RETURNING history_id`,
            [userId, testId, score, totalQuestions, correctAnswers, JSON.stringify(userAnswers)] // JSON.stringify() l√† c·∫ßn thi·∫øt ƒë·ªÉ l∆∞u m·∫£ng/ƒë·ªëi t∆∞·ª£ng JS v√†o c·ªôt JSONB
        );
        res.status(201).json({ 
            message: 'K·∫øt qu·∫£ b√†i l√†m ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.', 
            historyId: result.rows[0].history_id 
        });
    } catch (err) {
        console.error('L·ªói khi l∆∞u k·∫øt qu·∫£ b√†i l√†m:', err);
        res.status(500).json({ error: 'L·ªói server n·ªôi b·ªô khi l∆∞u k·∫øt qu·∫£ b√†i l√†m.' });
    }
});


// M·ªöI: Route ƒë·ªÉ l·∫•y l·ªãch s·ª≠ l√†m b√†i c·ªßa ng∆∞·ªùi d√πng
app.get('/history/user/:userId', async (req, res) => {
    const userId = parseInt(req.params.userId);

    if (isNaN(userId)) {
        return res.status(400).json({ error: 'ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.' });
    }

    try {
        const result = await pool.query(
            `SELECT 
                h.history_id,
                h.user_id,
                u.username,
                h.test_id,
                t.title AS test_title,
                h.score,
                h.total_questions,
                h.correct_answers,
                h.taken_at,
                h.user_answers
            FROM 
                public.history AS h
            JOIN 
                public.users AS u ON h.user_id = u.id
            JOIN 
                public.tests AS t ON h.test_id = t.test_id
            WHERE 
                h.user_id = $1::INTEGER
            ORDER BY 
                h.taken_at DESC`, // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
            [userId]
        );
        res.status(200).json(result.rows);
    } catch (err) {
        console.error(`L·ªói khi l·∫•y l·ªãch s·ª≠ b√†i l√†m cho user_id ${userId}:`, err);
        res.status(500).json({ error: 'L·ªói server n·ªôi b·ªô khi l·∫•y l·ªãch s·ª≠ b√†i l√†m.' });
    }
});



app.get('/levels', async (req, res) => {
    try {
        const result = await pool.query('SELECT level_id, name, image_url  FROM levels ORDER BY level_id ASC');
        res.status(200).json(result.rows);
    } catch (err) {
      console.error('L·ªói khi l·∫•y danh s√°ch levels:', err);
        res.status(500).json({ error: 'L·ªói server, kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu levels.' });
    }
});



//TR∆Ø·ªúNG TH√äM S·ª¨A L·∫§Y LEVEL
// POST /levels - T·∫°o level m·ªõi
app.post('/levels', async (req, res) => {
    const { name, image } = req.body;  // nh·∫≠n c·∫£ ·∫£nh

    try {
        const result = await pool.query(
            'INSERT INTO levels (name, image_url) VALUES ($1, $2) RETURNING *',
            [name, image]
        );
        res.json(result.rows[0]);
    } catch (err) {
        console.error('L·ªói th√™m c·∫•p ƒë·ªô:', err);
        res.status(500).json({ error: 'L·ªói server khi th√™m c·∫•p ƒë·ªô' });
    }
});

// S·ª≠a level
app.put('/levels', async (req, res) => {
    const { level_id, name, image } = req.body;

    if (!level_id) {
        return res.status(400).json({ error: 'Thi·∫øu level_id ƒë·ªÉ s·ª≠a' });
    }

    try {
        const result = await pool.query(
            'UPDATE levels SET name = $1, image_url = $2 WHERE level_id = $3 RETURNING *',
            [name, image, level_id]
        );

        if (result.rowCount === 0) {
            return res.status(404).json({ error: 'C·∫•p ƒë·ªô kh√¥ng t·ªìn t·∫°i' });
        }

        res.json(result.rows[0]);
    } catch (err) {
        console.error('L·ªói s·ª≠a c·∫•p ƒë·ªô:', err);
        res.status(500).json({ error: 'L·ªói server khi s·ª≠a c·∫•p ƒë·ªô' });
    }
});


// X√≥a level
app.delete('/levels', async (req, res) => {
    const { id } = req.body;  // id truy·ªÅn t·ª´ frontend th·ª±c ra l√† level_id
    try {
        // S·ª≠ d·ª•ng t√™n c·ªôt ƒë√∫ng l√† level_id thay v√¨ id
        const result = await pool.query(
            'DELETE FROM levels WHERE level_id = $1 RETURNING *',
            [id]
        );

        if (result.rowCount === 0) {
            return res.status(404).json({ error: 'C·∫•p ƒë·ªô kh√¥ng t·ªìn t·∫°i' });
        }

        res.json({ deletedLevel: result.rows[0] });
    } catch (err) {
        console.error('L·ªói x√≥a c·∫•p ƒë·ªô:', err);
        res.status(500).json({ error: 'L·ªói server khi x√≥a c·∫•p ƒë·ªô' });
    }
});

// L·∫•y danh s√°ch t·∫•t c·∫£ unit
app.get('/units', async (req, res) => {
    try {
        const result = await pool.query(
            'SELECT unit_id, level_id, title, image_url FROM units ORDER BY unit_id ASC'
        );
        res.status(200).json(result.rows);
    } catch (err) {
        console.error('L·ªói khi l·∫•y danh s√°ch units:', err);
        res.status(500).json({ error: 'L·ªói server, kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu units.' });
    }
});

// Th√™m unit m·ªõi
app.post('/units', async (req, res) => {
    const { level_id, title, image_url } = req.body;

    if (!level_id || !title) {
        return res.status(400).json({ error: 'Thi·∫øu level_id ho·∫∑c title' });
    }

    try {
        const result = await pool.query(
            'INSERT INTO units (level_id, title, image_url) VALUES ($1, $2, $3) RETURNING *',
            [level_id, title, image_url]
        );
        res.status(201).json(result.rows[0]);
    } catch (err) {
        console.error('L·ªói th√™m unit:', err);
        res.status(500).json({ error: 'L·ªói server khi th√™m unit' });
    }
});

// S·ª≠a unit theo id
app.put('/units/:id', async (req, res) => {
    const unit_id = parseInt(req.params.id);
    const { level_id, title, image_url } = req.body;

    if (!level_id || !title) {
        return res.status(400).json({ error: 'Thi·∫øu level_id ho·∫∑c title' });
    }

    try {
        const result = await pool.query(
            'UPDATE units SET level_id = $1, title = $2, image_url = $3 WHERE unit_id = $4 RETURNING *',
            [level_id, title, image_url, unit_id]
        );

        if (result.rowCount === 0) {
            return res.status(404).json({ error: 'Unit kh√¥ng t·ªìn t·∫°i' });
        }

        res.json(result.rows[0]);
    } catch (err) {
        console.error('L·ªói s·ª≠a unit:', err);
        res.status(500).json({ error: 'L·ªói server khi s·ª≠a unit' });
    }
});

// X√≥a unit theo id
app.delete('/units/:id', async (req, res) => {
    const unit_id = parseInt(req.params.id);

    try {
        const result = await pool.query(
            'DELETE FROM units WHERE unit_id = $1 RETURNING *',
            [unit_id]
        );

        if (result.rowCount === 0) {
            return res.status(404).json({ error: 'Unit kh√¥ng t·ªìn t·∫°i' });
        }

        res.json({ deletedUnit: result.rows[0] });
    } catch (err) {
        console.error('L·ªói x√≥a unit:', err);
        res.status(500).json({ error: 'L·ªói server khi x√≥a unit' });
    }
});



// --- RANKING ROUTES ---

// API Endpoint ƒë·ªÉ l·∫•y b·∫£ng x·∫øp h·∫°ng (ƒê√É S·ª¨A D√ôNG pool.query V√Ä C·ªòT ID C·ª¶A USERS)
app.get('/api/ranking', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT
                u.id AS user_id, -- ƒê·ªïi u.user_id th√†nh u.id
                u.username,
                SUM(h.score) AS total_score
            FROM
                users u
            JOIN
                history h ON u.id = h.user_id -- ƒê·ªïi u.user_id th√†nh u.id
            GROUP BY
                u.id, u.username -- ƒê·ªïi u.user_id th√†nh u.id
            ORDER BY
                total_score DESC;
        `);

        // V·ªõi pg, k·∫øt qu·∫£ tr·∫£ v·ªÅ trong .rows
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching ranking:', error);
        res.status(500).json({ message: 'L·ªói server khi l·∫•y b·∫£ng x·∫øp h·∫°ng.' });
    }
});

app.listen(3000, () => {
  console.log('‚úÖ Server is running at http://localhost:3000');
});